// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Space {
  space_id Int @id @default(autoincrement())
  title String?
  category String?
  author User? @relation(fields: [authorId], references: [user_id])
  authorId Int?
  stickerUrl String?  
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  cards Card []    // One-to-many relation with Card
}



model Card {
  card_id Int @id @default(autoincrement())
  title   String? 
  message String?
  gifUrl String?
  author  User?    @relation(fields: [authorId], references: [user_id]) // Author relation to User
  authorId   Int?
  upvotes Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  space Space @relation(fields: [space_id] , references: [space_id], onDelete: Cascade)  // Many-to-one relation with Space
  space_id Int 
  comments Comment[]
}


model Comment {
  comment_id Int @id @default(autoincrement())
  content String 
  author   User?    @relation(fields: [authorId], references: [user_id]) // Author relation to User
  authorId   Int?
  createdAt DateTime @default(now())
  card Card @relation(fields: [card_id], references: [card_id], onDelete: Cascade) // Many-to-one relation with Card
  card_id Int
}


model User {
  user_id Int @id @default(autoincrement())
  email String @unique
  password String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  spaces    Space[] // One-to-many relation with Space
  cards    Card[]   // One-to-many relation with Card
  comments  Comment[] // One-to-many relation with Comment
}

